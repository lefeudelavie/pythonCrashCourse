    一、本程序实际上基于pygame库，使用其提供的核心功能，来实现游戏。
    二、程序采用面向对象的程序设计原则。所有游戏屏幕上的实体，都是一个类。飞船、子弹、外星人、
记分牌。另外还有两个非实体的类：及游戏统计、游戏设置。
    
    三、入口代码主要有以下部分组成：
    1、初始化库
    2、初始化屏幕
    3、显示题头
    4、实例化各个类
    5、对于外星人，要创建群体（设计到库提供的Sprite功能）
    6、主循环中，检查鼠标事件、更新飞船、更新子弹、更新外星人。最后将重绘屏幕以及所有相关
       元素。
    

    四、主要的游戏逻辑通过一系列的函数来实现。


    五、程序开发的过程：
    1、程序开发是一个探索和逐渐成形的阶段。很难一次就把代码写得完美和完整，需要在编写的过程中，不断回过头来总结、分析、重构。
    2、当然对于复杂程序，是需要在事先设计出总体架构、算法、需要使用的工具和库。这些是编程中的纲，是不能随意更改的，这个纲才是保证程序结构的一致性和完整性所必要的。

    六、读代码的时候要问问题：
    1、这个程序的核心功能是什么？
    2、核心功能是如何实现的？
    3、程序的总体架构？
    4、程序是主体逻辑功能在那里实现的？
    5、程序使用了外部的库、工具？也就是程序的主要外部依赖。
    6、如果我来实现，应该如何来做？
    7、有哪些可以改进的地方？
    8、换一个语言该如何实现？

    七、本程序的架构分析
    理解本程序的架构从理解其类的构成出发就比较容易。屏幕上的所有可见的元素都是一个类：飞船、外星人、子弹、开始按钮、记分牌。当然也有些不可见的类，比如配置类，统计类。
    程序的主题逻辑就是监控键盘事件，来控制飞船的移动和发射子弹。利用pygame提供的碰撞检测能力来完成游戏的核心功能。主题逻辑实际上在主文件中体现。实际上的各个逻辑功能，集中存放在一个文件中，这些逻辑功能实际
    上体现了程序的逻辑。

    外星人和子弹的类是比较特殊的类，因为他们实际上是有小组属性的类。多个实例可以聚合成组，以组来同其他对象发生交互。可以以组来控制其行为。

    八、本程序的具体阅读和分析
    1、用到的pygame库的以下主要功能：
    （1）初始化screen：pygame.init()，初始化diplay模块，通过调用pygame.display.set_mode函数（给出长宽的参数）从而生成一个diaplay的Surface对象screen，也就是主要的显示界面。
    （2）调用pygame.display.set_caption()来设置主界面的题头。
    （3）调用pygame.image.load()方法来从一张图片来生成一个pygame的image对象，image对象实际上也是一个Surface对象。
    （4）调用image对象的get_rect()方法来获得与image同等大小的一个矩形。通过控制这个矩形对象的坐标来实现游戏元素的移动。
    （5）调用screen对象（主界面）的blit方法（screen对象，实际上就是一个Surface对象），利用（4）种矩形对象提供的坐标位置，在主界面也就是screen之上绘制（3）种的image对象。
    （6）将需要重复的元素（如alien，bullet，因为需要多个外星人和bullet，并且他们的动作和行为在游戏中是设计一致的）定义为py.sprite.Sprite的子类，再调用py.sprite.Group来生成一个group对象。在游戏
         中特定的时间点上将多个alien或者bullet添加到对应的group中。再在游戏中统一的来处理他们，这样能提高效率，并降低编程的难度。
